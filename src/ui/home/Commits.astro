---
import { Badge } from "@ui/components/badge/badge";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@ui/components/card/card";
import { DateTime } from "luxon";
import { parseTitle, type RepositoryTitle } from "@utils/common";
import type { Repository } from "@ui/home/api/types/Repository.type";
import type { FetchedCommit } from "@ui/home/api/github/fetchGithubCommits";

interface Props {
  repos: Record<string, Repository>;
  commits: FetchedCommit[];
}

const { repos, commits } = Astro.props;
/* 
const parser = new CommitParser(); */

const parseDate = (date: string) => {
  return DateTime.fromISO(date).toLocaleString(DateTime.DATE_MED);
}

const parseCommitTitle = (_title: string) => {
  
  const msg = "Unknown ðŸ« ";

  const { name } = repos[_title];
  const parse = parseTitle(name, "-")

  return !parse ? msg : parse;
}

/* const parseCvm = (msg: string) => {
  return parser.parse(msg);
} */

---

{
  !commits.length ?
    (
      <span class="text-woodsmoke-900 dark:text-woodsmoke-200 text-base font-medium">No commits for yet... ðŸ˜“</span>
    ) 
  : 
    (
      commits.map(({ repo: { name }, commit, created_at }) => (
      <Card className="duration-1000 animate-in fade-in"> 
        <CardHeader>
          <CardTitle>
            <div class="flex justify-between items-center">
            {
              typeof parseCommitTitle(name) === "object" ? 
                (
                  <p class="h-max w-auto max-w-max">
                    <a 
                      href={ repos[name]?.html_url }
                      target="_blank"
                      class="text-woodsmoke-950 text-base inline-block decoration-2 pointer-events-auto decoration-woodsmoke-100 underline-offset-4 dark:text-woodsmoke-50 hover:underline">
                      { (parseCommitTitle(name) as RepositoryTitle).title }
                    </a>
                    <span class="text-woodsmoke-600 dark:text-woodsmoke-400 text-base">
                      &bullet; { (parseCommitTitle(name) as RepositoryTitle).scope }
                    </span>
                  </p>
                ) : 
                (
                  <h3 class="text-woodsmoke-950 text-base inline-block dark:text-woodsmoke-50">
                    { (parseCommitTitle(name) as string) }
                  </h3>
                ) 
            }
            <span class="text-sm text-woodsmoke-800 dark:text-woodsmoke-200">
              { parseDate(created_at) }
            </span>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent className="text-woodsmoke-950 dark:text-woodsmoke-200 text-sm">
          <p class="leading-snug text-wrap">
            { commit.message }
          </p>
        </CardContent>
        <CardFooter>
          <div class="flex flex-wrap grow items-center space-y-0 gap-2.5">
          {/* {
            <Badge variant="secondary">
              { parseCvm(commit.message)["type"] }
            </Badge>
          } */}
          { 
            repos[name]?.topics.map((topic) => (
              <Badge>{ topic }</Badge>
            ))
          }
          </div>
        </CardFooter>
      </Card>
    ))
  )
}